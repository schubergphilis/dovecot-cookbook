# encoding: UTF-8
#
# Cookbook Name:: dovecot
# Library:: Pwfile
# Author:: Xabier de Zuazo (<xabier@zuazo.org>)
# Copyright:: Copyright (c) 2013-2014 Onddo Labs, SL.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
module DovecotCookbook
  # Helper module to check password file and import it
  module Pwfile
    extend Chef::Mixin::ShellOut

    def self.exists?(localdata)
      true if ::File.exist?(localdata)
    end

    def self.file_to_hash(inputfile)
      output_entries = {}
      passwordfile = File.open(inputfile, File::RDONLY | File::CREAT, 640)
      passwordfile.readlines.each do |line|
        user, data = fileline_to_userdb_hash(line)
        output_entries[user] = data
      end
      passwordfile.close
      output_entries
    end

    def self.passfile_read(input)
      # Returns Password file in userdb style hash and if exists
      [file_to_hash(input), exists?(input)]
    end

    def self.fileline_to_userdb_hash(input)
      # Returns a hash of details daken from the userdb file line
      data = [nil] * 7
      if input.strip.split(':').length == 2
        user, data[0] = input.strip.split(':')
      else
        user = input.strip.split(':')[0]
        data = input.strip.split(':')[1..7]
      end
      [user, data]
    end

    def self.dbentry_to_array(key, value)
      # Returns an array with 8 values to use with user copy.
      if value.is_a?(Array)
        [key] + (value + ([nil] * (7 - value.size)))
      else
        [key, value] + ([nil] * 6)
      end
    end

    def self.password_valid?(hashed_pw, plaintext_pw)
      true unless shell_out(
        "/usr/bin/doveadm pw -t '#{hashed_pw}' -p '#{plaintext_pw}'"
      ).exitstatus != 0
    end

    def self.arrays_same?(array1, array2)
      true if (array1 - array2).empty? && (array2 - array1).empty?
    end

    def self.encrypt_password(plaintextpass)
      # Return the password generated by dovecot and remove newline
      shell_out("/usr/bin/doveadm pw -s MD5 -p \
                #{plaintextpass}").stdout.tr("\n", '')
    end

    def self.generate_userpass(input_creds, plaintextpass, updated, file_exists)
      if !input_creds.nil? && file_exists == true
        if password_valid?(
          input_creds[0], plaintextpass
        )
          return [input_creds[0], updated]
        end
      end
      [encrypt_password(plaintextpass), true]
    end

    def self.compile_users(databag_users, current_users, pwfile_exists, updated, credentials)
      databag_users.each do |username, user_details|
        current_user = dbentry_to_array(username, user_details)
        current_user[1], updated = generate_userpass(current_users[username], current_user[1], updated, pwfile_exists)
        credentials.push(current_user)
      end
      updated
    end
  end
end
